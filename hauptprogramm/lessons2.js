window.lessons2 = [
  {
    title: "Beispiel zu relationalen Datenbanken",
    description: "Erlebe, wie aus einer simplen Tabelle plötzlich Datenchaos werden kann – und wie ein cleveres Design dir das Leben in der Praxis massiv erleichtert.",
    list: [
      "🚀 Stell dir vor, du hast deinen eigenen Elektromarkt und willst endlich den Überblick behalten: Wer verkauft was – und wie viel kommt rein?",
      "",
      "Am Anfang notierst du alles brav in einer einzigen Tabelle. Das klappt... bis plötzlich Verwirrung entsteht:",
      "",
      " VerkNr | VerkName  | PLZ   | VerkAdresse | Produktname    | Umsatz",
      " ---------------------------------------------------------------",
      " V1     | Meier     | 80331 | München     | Waschmaschine  | 11000",
      " V1     | Meier     | 80331 | München     | Herd           | 5000",
      " V1     | Meier     | 80331 | München     | Kühlschrank    | 1000",
      " V2     | Schneider | 70173 | Stuttgart   | Herd           | 4000",
      " V2     | Schneider | 70173 | Stuttgart   | Kühlschrank    | 3000",
      " V3     | Müller    | 50667 | Köln        | Staubsauger    | 1000",
      "",
      "❗ Wo tauchen die Probleme auf?",
      " - Die Verkäuferdaten (z.B. Name, Adresse) stehen ständig doppelt – das heißt Redundanz.",
      " - ändert sich zum Beispiel die Adresse von Herrn Meier, musst du an mehreren Stellen suchen und ändern. Sonst hast du Widersprüche (Inkonsistenzen).",
      " - Wird ein Produkt gelöscht (z.B. alle Zeilen mit 'Staubsauger'), ist plötzlich auch Verkäufer Müller aus der Datenbank verschwunden – Datenverlust!",
      "",
      "😱 Und was bedeutet das?",
      " - Die Datenbank braucht mehr Speicherplatz als nötig.",
      " - Fehler passieren ständig, zum Beispiel unterschiedliche Schreibweisen.",
      " - Du verlierst die Übersicht und suchst dich dumm und dämlich.",
      "",
      "💡 Wie lösen Profis das Problem?",
      " - Sie trennen die Infos in eigene Tabellen:",
      "  • Verkäufer kommen in eine Tabelle (jeder nur einmal!)",
      "  • Produkte stehen in einer eigenen Tabelle",
      "  • Die Verkäufe (also: Wer verkauft was und wie viel?) landen in einer dritten Tabelle",
      "",
      "➡️ So sparst du Platz, vermeidest Fehler – und deine Daten bleiben sauber, sicher und jederzeit nutzbar.",
      "",
      "🏁 Fazit:",
      "Schon dieses kleine Beispiel zeigt: Ein cleveres Datenbank-Design macht dir das Leben leichter. Im nächsten Schritt siehst du, wie diese Strukturen wirklich funktionieren!"
    ],
    video: "https://www.youtube.com/embed/2RlWxMRYw20",
    challenge: {
      type: "mc",
      question: "Warum ist es problematisch, alle Informationen in nur einer Tabelle zu speichern (wie im Beispiel oben)?",
      options: [
        "Es werden weniger Daten gespeichert.",
        "Verkäufer oder Produkte können versehentlich aus der Datenbank verschwinden.",
        "Man braucht mehr Tabellen.",
        "Die Tabelle ist immer fehlerfrei."
      ],
      solution: 1
    }
  },
  {
    title: "Relationale Datenstrukturen – Grundbegriffe & Aufbau",
    description: "Du fragst dich, warum Datenbank-Profis nie einfach von 'Tabellen' sprechen? Hier erfährst du, welche Begriffe wirklich zählen – und warum sie dir helfen, Ordnung ins Datenchaos zu bringen.",
    list: [
      "👋 Vielleicht kennst du schon Excel-Tabellen. Aber in der Datenbankwelt gibt es eigene Begriffe und klare Regeln:",
      "",
      " • Relation = Tabelle (dein Grundelement)",
      " • Tupel = Eine Zeile (Datensatz) in der Tabelle",
      " • Attribut = Eine Spalte (Feld) in der Tabelle",
      " • Kardinalität = Anzahl der Zeilen (Datensätze)",
      " • Grad = Anzahl der Spalten (Eigenschaften)",
      " • Primärschlüssel = Ein Feld, das jede Zeile eindeutig macht",
      " • Gebiet (Domain) = Der erlaubte Wertebereich eines Attributs (z. B. nur deutsche Städtenamen für 'Stadt')",
      "",
      "💡 Beispiel – Lieferanten-Tabelle:",
      " | LNr | Name     | Stadt      | PLZ   |",
      " |-----|----------|------------|-------|",
      " | 1   | Müller   | München    | 81724 |",
      " | 2   | Schmidt  | Regensburg | 93055 |",
      " | 3   | Maier    | Hamburg    | 20543 |",
      " | 4   | Schwarz  | Köln       | 50087 |",
      " | 5   | Weiß     | Berlin     | 11168 |",
      "",
      "So erkennst du auf einen Blick:",
      " • Die ganze Tabelle ist eine Relation.",
      " • Jede Zeile (z.B. Müller) ist ein Tupel.",
      " • 'Stadt' oder 'PLZ' ist ein Attribut.",
      "",
      "✅ Wichtige Regeln für Relationen:",
      " 1. Keine doppelten Zeilen – jedes Tupel ist einzigartig.",
      " 2. Die Reihenfolge von Zeilen und Spalten ist egal.",
      " 3. Jeder Wert ist atomar: In jedem Feld steht nur EIN Wert, nie mehrere!",
      " 4. Jeder Wert kommt aus seinem erlaubten Bereich (z. B. bei PLZ nur Zahlen).",
      "",
      "🚩 Und was passiert, wenn man sich nicht an die Regeln hält?",
      " | VerkNr | VerkName | Produkte                        | Umsatz |",
      " |--------|----------|---------------------------------|--------|",
      " | V1     | Meier    | Waschmaschine, Herd, Kühlschrank| 17000  |",
      "",
      "In der Spalte 'Produkte' stehen hier mehrere Werte – das ist nicht erlaubt und macht die Verwaltung fehleranfällig!",
      "",
      "🎯 Fazit:",
      "Mit diesen klaren Strukturen bleibt alles übersichtlich, und du legst das perfekte Fundament für jede weitere Datenbank-Abfrage.",
      "Als Nächstes lernst du, warum der Primärschlüssel das Herzstück jeder Tabelle ist!"
    ],
    video: "https://www.youtube.com/embed/UZiVj6nKSM8",
    challenge: {
      type: "mc",
      question: "Welcher Begriff bezeichnet in einer relationalen Tabelle eine einzelne Zeile?",
      options: [
        "Attribut",
        "Kardinalität",
        "Tupel",
        "Grad"
      ],
      solution: 2
    }
  },
  {
    title: "Primärschlüssel – Das Rückgrat jeder Tabelle",
    description: "Eindeutigkeit ist das A und O! Hier entdeckst du, warum der Primärschlüssel so wichtig ist – und wie du ihn clever auswählst, damit nie wieder Daten-Chaos entsteht.",
    list: [
      "🔑 Schon mal erlebt, dass zwei Kund:innen den gleichen Namen haben? Oder jemand aus Versehen doppelt eingetragen wurde?",
      "",
      "Damit deine Datenbank immer weiß, welcher Eintrag wirklich einzigartig ist, gibt es den sogenannten Primärschlüssel.",
      "",
      "Beispiel: In einer Lieferantentabelle kann die Spalte 'Lieferantennummer' (LNr) der Primärschlüssel sein – jede LNr gibt es nur einmal.",
      "",
      "❓ Warum braucht jede Tabelle einen Primärschlüssel?",
      " - Er verhindert doppelte Datensätze.",
      " - Du kannst gezielt suchen, ändern oder löschen – ohne versehentlich die falschen Daten zu erwischen.",
      " - Der Primärschlüssel ist Voraussetzung für viele SQL-Operationen und Verbindungen zwischen Tabellen.",
      "",
      "🔬 Praxis: Chemische Elemente",
      " | Protonen | Atomgewicht | Name        | Symbol |",
      " |----------|-------------|-------------|--------|",
      " | 1        | 1,0079      | Wasserstoff | H      |",
      " | 2        | 4,0026      | Helium      | He     |",
      "",
      "Hier könnten 'Protonen', 'Name' oder 'Symbol' als Primärschlüssel dienen, weil sie jeweils eindeutig sind.",
      "",
      "Aber Achtung: Nicht jeder Wert eignet sich. Das 'Atomgewicht' zum Beispiel kann irgendwann doppelt vorkommen.",
      "",
      "🔍 Noch mehr Schlüssel-Begriffe:",
      " • Superschlüssel: Jede Attribut-Kombination, die eine Zeile eindeutig macht.",
      " • Schlüsselkandidat: Minimaler Superschlüssel – so klein wie möglich, trotzdem eindeutig.",
      " • Primärschlüssel: Einer der Schlüsselkandidaten, den du auswählst.",
      " • Alternative Schlüssel: Die anderen Schlüsselkandidaten.",
      "",
      "🎯 Was macht einen guten Primärschlüssel aus?",
      " 1. Er garantiert Eindeutigkeit.",
      " 2. Er bleibt möglichst immer gleich.",
      " 3. Er ist so kurz wie möglich.",
      " 4. Ideal: Ein einziges Feld, z. B. eine Kundennummer.",
      "",
      "🔗 Manchmal braucht es einen zusammengesetzten Primärschlüssel:",
      " | Produktname  | Produkttyp | Bestand | Preis |",
      " |--------------|------------|---------|-------|",
      " | Staubsauger  | T06        | 25      | 498   |",
      " | Staubsauger  | T17        | 17      | 219   |",
      "",
      "Hier reicht 'Produktname' allein nicht, aber die Kombination mit 'Produkttyp' ist eindeutig!",
      "",
      "💡 Tipp: Einfach eine neue Nummer als Primärschlüssel einzuführen, kann Redundanz erzeugen, wenn die Kombination schon eindeutig ist – immer abwägen!",
      "",
      "✅ Fazit: Der Primärschlüssel ist das Ordnungs-Prinzip jeder Tabelle. Gut gewählt, sorgt er für Klarheit und verhindert Daten-Wirrwarr.",
      "Im nächsten Abschnitt lernst du, wie die Datenbank die Einhaltung dieser Ordnung garantiert!"
    ],
    video: "https://www.youtube.com/embed/wSEK8C0N9UQ",
    challenge: {
      type: "mc",
      question: "Was zeichnet einen guten Primärschlüssel aus?",
      options: [
        "Er enthält so viele Felder wie möglich.",
        "Er garantiert Eindeutigkeit und ändert sich möglichst nie.",
        "Er darf ruhig doppelt vorkommen.",
        "Er besteht immer aus Vor- und Nachname."
      ],
      solution: 1
    }
  },
  {
    title: "Relationale Integritätsregeln – So bleiben deine Daten sauber",
    description: "Sicherheit, auf die du dich verlassen kannst: Mit Integritätsregeln sorgt die Datenbank dafür, dass deine Daten immer korrekt und widerspruchsfrei bleiben.",
    list: [
      "🧩 Stell dir vor, du möchtest dich nie wieder fragen, ob deine Daten noch stimmen… Genau dafür gibt’s Integritätsregeln.",
      "",
      "In der Datenbank-Welt sind vor allem zwei Regeln entscheidend:",
      "",
      "🔒 1. Entitäts-Integrität (für den Primärschlüssel)",
      " - Jede Zeile braucht einen gültigen, nie leeren Primärschlüssel!",
      " - Beispiel: Jeder Kunde muss eine eindeutige Kundennummer haben.",
      " - Auch bei zusammengesetzten Schlüsseln (z. B. Produktname & Produkttyp) darf kein Teil fehlen.",
      "",
      "🚦 2. Referenz-Integrität (für Fremdschlüssel)",
      " - Ein Fremdschlüssel verweist auf einen Primärschlüssel in einer anderen Tabelle.",
      " - Der Wert muss dort wirklich existieren, sonst läuft die Datenbank ins Leere!",
      " - Beispiel: In einer Auftragstabelle steht die Kundennummer. Die muss es auch in der Kundentabelle geben.",
      "",
      "🔄 Und was passiert beim Löschen oder Ändern von Daten?",
      " - Datenbanken können verhindern, dass etwas gelöscht wird, solange noch Verweise existieren (NO ACTION).",
      " - Oder sie löschen automatisch alle verbundenen Einträge mit (CASCADE).",
      " - Oder sie setzen den Fremdschlüssel auf NULL (SET NULL), wenn das erlaubt ist.",
      "",
      "🎯 Fazit:",
      "Diese Regeln schützen vor Daten-Chaos und garantieren, dass deine Infos immer zuverlässig sind – egal, wie groß die Datenbank wird.",
      "Jetzt geht's zum Werkzeugkasten: Wie kann man mit relationaler Algebra jede Abfrage bauen, die man sich vorstellen kann?"
    ],
    video: "https://www.youtube.com/embed/gWkD_1mRFWw",
    challenge: {
      type: "mc",
      question: "Was ist ein Beispiel für Verletzung der Referenz-Integrität?",
      options: [
        "Eine Auftragstabelle enthält eine Kundennummer, die es in der Kundentabelle nicht gibt.",
        "Ein Primärschlüssel ist eindeutig.",
        "Ein Feld ist atomar.",
        "Eine Tabelle hat mehrere Spalten."
      ],
      solution: 0
    }
  },
  {
    title: "Relationale Algebra – Das Werkzeug für Datenbank-Abfragen",
    description: "Lass uns gemeinsam die Zaubertricks der Datenbankabfragen entdecken: Mit relationaler Algebra kombinierst, filterst und verwandelst du Daten so flexibel wie nie zuvor!",
    list: [
      "🎩 Stell dir vor, du willst aus deiner Datenbank alles herausholen, was geht. Die relationale Algebra liefert die Zaubertricks dafür!",
      "",
      "Mit diesen Operatoren kannst du Daten kombinieren, filtern und auswählen – wie mit einem mathematischen Baukasten:",
      "",
      "1️⃣ Vereinigung (∪):",
      " - Alle Einträge aus zwei Tabellen zusammenwerfen – Doppelte kommen nur einmal vor.",
      "",
      "2️⃣ Schnitt (∩):",
      " - Nur das zeigen, was in beiden Tabellen steckt.",
      "",
      "3️⃣ Differenz (∖):",
      " - Was steht in Tabelle 1, aber nicht in Tabelle 2?",
      "",
      "4️⃣ Projektion (π):",
      " - Nur bestimmte Spalten anzeigen, z. B. Name & PLZ.",
      "",
      "5️⃣ Restriktion (σ):",
      " - Zeilen nach einer Bedingung filtern (z. B. nur Kunden aus München).",
      "",
      "6️⃣ Kreuzprodukt (×):",
      " - Jede Zeile aus Tabelle 1 mit jeder aus Tabelle 2 kombinieren.",
      "",
      "7️⃣ Verbund (⨝, Join):",
      " - Tabellen über ein gemeinsames Feld verbinden – z. B. alle Bestellungen samt Kundennamen.",
      "",
      "8️⃣ Division (÷):",
      " - Wer erfüllt ALLE Bedingungen? (z. B. Lieferanten, die alle Teile liefern können)",
      "",
      "9️⃣ Umbenennung (ρ):",
      " - Tabellen oder Spalten umbenennen, damit alles besser kombinierbar ist.",
      "",
      "💡 Gut zu wissen:",
      " - Nach jedem Operator bekommst du wieder eine Tabelle – du kannst also beliebig viele Operatoren kombinieren!",
      "",
      "👾 Beispiele:",
      " - Kunden aus Berlin ODER Hamburg: KundenBerlin ∪ KundenHamburg",
      " - Nur die Namen aller Kunden: π{Name}(Kunden)",
      " - Nur Kunden mit PLZ 80331: σ{PLZ=80331}(Kunden)",
      "",
      "🎯 Fazit:",
      "Mit diesen Werkzeugen bist du bereit, aus deiner Datenbank alles herauszuholen. Im nächsten Kapitel siehst du, wie das praktisch in SQL aussieht!"
    ],
    video: "https://www.youtube.com/embed/9PpWZ8gKa8c",
    challenge: {
      type: "mc",
      question: "Welcher Operator der relationalen Algebra wählt bestimmte SPALTEN einer Tabelle aus?",
      options: [
        "Vereinigung (∪)",
        "Projektion (π)",
        "Schnitt (∩)",
        "Kreuzprodukt (×)"
      ],
      solution: 1
    }
  }
];
